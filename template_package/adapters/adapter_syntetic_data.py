from biocypher import BioCypher
import pandas as pd
from biocypher._logger import logger
from enum import Enum, auto
from itertools import chain
from typing import Optional


class AdapterNodeType(Enum):
    """
    Define types of nodes the adapter can provide.
    """

    PROTEIN = auto()

class AdapterProteinField(Enum):
    """
    Define possible fields the adapter can provide for proteins.
    """

    ID = "id"
    PREFERRED_ID = "preferred_id"
    GENESYMBOL = "genesymbol"
    NCBI_TAX_ID = "ncbi_tax_id"

class AdapterEdgeType(Enum):
    """
    Enum for the types of the protein adapter.
    """

    PROTEIN_PROTEIN_INTERACTION = "protein_protein_interaction"
    BINDING = "binding"
    ACTIVATION = "activation"
    PHOSPHORYLATION = "phosphorylation"
    UBIQUITINATION = "ubiquitination"
    INHIBITION = "inhibition"

class AdapterProteinProteinEdgeField(Enum):
    """
    Define possible fields the adapter can provide for protein-protein edges.
    """

    INTERACTION_TYPE = "interaction_type"
    INTERACTION_SOURCE = "interaction_source"

class Adapter:
    __bc = BioCypher()

    def __init__(
            self,
            node_types: Optional[list] = None,
            node_fields: Optional[list] = None,
            edge_types: Optional[list] = None,
            edge_fields: Optional[list] = None,
    ):
        self._set_types_and_fields(node_types, node_fields, edge_types, edge_fields)

    def get_nodes(self):
        """
                Returns a generator of node tuples for node types specified in the
                adapter constructor.
        """
        logger.info("Reading nodes.")

        df = pd.read_csv("../../synthetic_protein_interactions.tsv", sep="\t", header=0)

        if 'source' not in df.columns or 'target' not in df.columns:
            raise ValueError("CSV must contain 'source' and 'target' columns.")
        else:
            source_nodes = [
                (source, 'uniprot_protein',
                 {'genesymbol': source_genesymbol, 'ncbi_tax_id': ncbi_tax_id_source})
                for source, source_genesymbol, ncbi_tax_id_source in
                zip(df['source'], df['source_genesymbol'], df['ncbi_tax_id_source'])
            ]
            target_nodes = [
                (target, 'uniprot_protein',
                 {'genesymbol': target_genesymbol, 'ncbi_tax_id': ncbi_tax_id_target})
                for target, target_genesymbol, ncbi_tax_id_target in
                zip(df['target'], df['target_genesymbol'], df['ncbi_tax_id_target'])
            ]
        node_tuples = tuple(source_nodes + target_nodes)
        return node_tuples

    def get_edges(self, probability: float = 0.3):
        """
        Returns a generator of edge tuples for edge types specified in the
        adapter constructor.

        Args:
            probability: Probability of generating an edge between two nodes.
        """

        logger.info("Generating edges.")

        df = pd.read_csv("../../synthetic_protein_interactions.tsv", sep="\t", header=0)

        if 'source' not in df.columns or 'target' not in df.columns:
            raise ValueError("CSV must contain 'source' and 'target' columns.")
        else:
            edge_tuples = [
                (source + target, source, target, type,
                 {'is_stimulation': is_stimulation, 'is_inhibition': is_inhibition,
                  'consensus_direction': consensus_direction,
                  'consensus_stimulation': consensus_stimulation,
                  'consensus_inhibition': consensus_inhibition})
                for
                source, target, type, is_stimulation, is_inhibition, consensus_direction, consensus_stimulation, consensus_inhibition
                in zip(df['source'], df['target'], df['type'], df['is_stimulation'], df['is_inhibition'],
                       df['consensus_direction'],
                       df['consensus_stimulation'], df['consensus_inhibition'], )

            ]
        return tuple(edge_tuples)

    def get_node_count(self):
        """
        Returns the number of nodes generated by the adapter.
        """
        return len(self.get_nodes())

    def _set_types_and_fields(self, node_types, node_fields, edge_types, edge_fields):
        if node_types:
            self.node_types = node_types
        else:
            self.node_types = [type for type in AdapterNodeType]

        if node_fields:
            self.node_fields = node_fields
        else:
            self.node_fields = [
                field
                for field in chain(
                    AdapterProteinField,
                )
            ]

        if edge_types:
            self.edge_types = edge_types
        else:
            self.edge_types = [type for type in AdapterEdgeType]

        if edge_fields:
            self.edge_fields = edge_fields
        else:
            self.edge_fields = [field for field in chain()]

        print("self.node_types: ", self.node_types)
        print("self.node_fields: ", self.node_fields)
        print("self.edge_types: ", self.edge_types)
        print("self.edge_fields: ", self.edge_fields)



